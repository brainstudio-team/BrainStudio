__version__ = 0.001
__abstract__ = False

from BrainStdBECore.Node import Node as Node
from BrainStdBECore.BSException import BSException as BSException
import numpy as np
import nemo
import exceptions
import os

class BrainStdBEClass(Node) :
    
    added_classes = []
    
    def __init__(self) :
        super(BrainStdBEClass,self).__init__()
        self.architecture = 'NeMo'
        self.model_type ='spike'
        self.input_field = 'neurons'
        self.output_field = 'neurons'
        self.units_field = 'neurons'
             
        self.fields.append(['neurons', 'Number of neurons','integer', '1', ''])
        self.fields.append(['eval_for_each', 'Evaluate formula for each neuron', 'bool', 'False'])

        
        self.start_neuron = -1
        self.size = -1
        self.neuron_type_id = -1
        
        self.fired = []

    def configure_static(self) :
        
        BrainStdBEClass.added_classes = []
        
        print 'configuring NeMo neuron types'

        ini_path = nemo.__nemo_path__ + '/lib/nemo/plugins/'
    
        for file in os.listdir(ini_path):
            if file.endswith('ini'):
                neuron_type = file[0:-4]
                handle = open(ini_path+file)
                text = handle.readlines()
                handle.close()
            
                parameter = False
                state = False
                parameters=[]
                states=[]
                default_parameters=[]
                default_states=[]
                for l in text: 
                    
                    l = l.rstrip("\r")                        
                    l = l.rstrip("\n")
                    
                    if l == '':
                        continue                             
                    if l == '[parameter_names]':
                        parameter = True
                        state = False
                    elif l == '[state_names]':
                        state = True
                        parameter = False
                    else:
                        left = l[0:l.rfind('=')]
                        left=left.strip()
			right =  l[l.rfind('=')+1:len(l)]
                        right=right.strip()
                        
                        if parameter:
                            parameters.append(left)
                            default_parameters.append(right)
                        elif state:
                            states.append(left)   
                            default_states.append(right)           

                self.configurations[neuron_type] = (parameters, states, default_parameters, default_states)
    
    def get_version(self):
        return __version__
        
    def get_input_size(self):
        return self.size
    
    def get_output_size(self):
        return self.size
        
    def get_start_neuron(self):
        return self.start_neuron
        
    def set_fired(self, fired):
        self.fired = fired
        
    def get_stim(self):
        return self.stim
        
    def get_data(self, args):
        first_neuron = args['first_neuron']
        last = args['last']
        outputs = np.zeros(last-first_neuron+1)
       
        n=0
        while n < len(self.fired) and self.fired[n] < first_neuron:
            n += 1
        
        while n < len(self.fired) and self.fired[n] <=last:
            outputs[self.fired[n]] = 1
            n += 1
            
        return outputs
        
    def get_all_data(self):
        return self.fired

        
    def set_data(self, args):
        inputs = args['inputs']
        first_neuron = args['first_neuron']
        last = args['last']
        for n in range(first_neuron, last+1):
            self.stim.append((n,inputs[n-first_neuron]))
        
    def initialize(self, brain, node, args):
        self.start_neuron = args['start_neuron']
        
        self.size = self.safely_get(node, 'neurons', 'int')
        
        where = self.get_where()  
        if self.class_name in BrainStdBEClass.added_classes:
            already_added_type=True
        else:         
            try:
                cn =  self.class_name[0:self.class_name.find('-')]
                self.neuron_type_id = brain.add_nemo_neuron_type(cn)
                BrainStdBEClass.added_classes.append(self.class_name)
            except exceptions.BaseException as e:
                what = 'Error in NeMo adding neuron type: ' + e.args[0]
                raise BSException(where, what)
                    
        self.eval_for_each = self.safely_get(node, 'eval_for_each', 'bool')
        formulas = self.construct_formulas(node)  
        if self.eval_for_each  == False:

            neuron_args = self.evaluate_formulas(formulas, node, self.attributes, dict(), dict())
            for n in range(self.size): 
                try:
                    brain.add_nemo_neuron(self.neuron_type_id, neuron_args[0], neuron_args[1]);
                except exceptions.BaseException as e:
                    what = 'Error in NeMo adding neuron:' + e.args[0]
                    print neuron_args[0]
                    print neuron_args[1]
                    raise BSException(where, what)
            
        else:            
            for n in range(self.size):
                neuron_args = self.evaluate_formulas(formulas, node, self.attributes, dict(), dict())   
                try:
                    brain.add_nemo_neuron(self.neuron_type_id, neuron_args[0], neuron_args[1]);
                except exceptions.BaseException as e:
                    what = 'Error in NeMo adding neuron: ' + e.args[0]
                    raise BSException(where, what)
        self.stim = []
        return self.size
            
    def update(self):
        self.stim = []
        args = dict()
        for s in self.sources:
            s.get_data(args)
        
